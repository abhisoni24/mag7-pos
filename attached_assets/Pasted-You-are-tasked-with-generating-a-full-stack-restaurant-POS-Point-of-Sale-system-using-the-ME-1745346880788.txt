You are tasked with generating a **full-stack restaurant POS (Point-of-Sale) system** using the **MERN stack** (MongoDB, Express.js, React.js, Node.js). The application must support multiple roles with role-specific permissions and a clean, intuitive interface tailored to restaurant operations.
VERY IMPORTANT:
Use MongoDB as a database of choice strictly and do not use a relational database. Use the following connection string:
‚Äúmongodb+srv://asoni24:admin@cluster0.mpqcvei.mongodb.net/‚Äù

#### üçΩÔ∏è Project Description:
Build a **Restaurant POS System** to manage the front and back-of-house operations, support multiple user roles (Host, Waiter, Chef, Manager, Owner, Admin), and track customer orders from entry to payment. Include user authentication, session handling, and dynamic role-based access control.

### ‚úÖ Functional Requirements

#### 1. **Customer Interaction Flow**
- Orders can be placed at different times (e.g., starters, main course, desserts).
- Orders are entered by a **waiter**, sent to the **chef**, and then delivered back by the **waiter**.
- Customers may place additional orders during their visit.
- Customers make payment at the end, optionally including a tip.

#### 2. **Host Functionality**
- Login to system from the front of house.
- View table availability.
- Seat customers and mark tables as ‚Äúoccupied.‚Äù
- Mark tables as ‚Äúopen‚Äù when customers leave.

#### 3. **Waiter Functionality**
- Login to system.
- Create and edit orders for their assigned tables.
- Assign order components (e.g., drinks vs meals separately).
- Add follow-up orders (e.g., dessert after main course).
- Process payment including tip.
- View list of their assigned tables.

#### 4. **Chef Functionality**
- Login to the system from the back-of-house.
- View incoming orders.
- Prioritize orders manually.
- Mark orders as ‚Äúin-progress‚Äù or ‚Äúdone.‚Äù

#### 5. **Manager Functionality**
- All waiter capabilities.
- Add/Remove restaurant staff (waiters, chefs).
- Modify the menu: add/remove items, update prices, flag specials.
- Assign tables to waiters.

#### 6. **Owner Functionality**
- All manager capabilities.
- Add/Remove managers.
- View business reports:
  - Item-wise order frequency over a period.
  - Revenue earned from payments.

#### 7. **Admin/Maintenance (Software Firm Admin)**
- Has root-level server access (not part of restaurant staff).
- Can fix technical issues.
- Has a separate login portal to avoid accidental deletion by restaurant staff.

---

### üß± Technical Stack
- **Frontend:** React.js (with components for each role-based dashboard and dynamic routing)
- **Backend:** Node.js with Express.js
- **Database:** MongoDB
- **Authentication:** JWT-based user login with role-based access
- **Deployment OS:** Windows
- **Reports:** Generate PDF reports for the owner

---

### üìã Additional Guidelines
- Implement responsive and accessible UI.
- Use RESTful API design.
- Include robust input validation and error handling.
- Support session persistence (e.g., refresh-safe login).
- Use state management (e.g., Redux if needed)
- All users must be able to login via their respective portals and access only their functionality. The login portal for Admin should be different and they should have master control of everything.
